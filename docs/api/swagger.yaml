definitions:
  models.Command:
    properties:
      command:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      server_id:
        type: string
      title:
        type: string
    type: object
  models.Media:
    properties:
      discord_url:
        type: string
      id:
        type: integer
      is_archived:
        type: boolean
      server_id:
        type: string
      user_id:
        type: string
    type: object
  models.Server:
    properties:
      created_at:
        type: string
      id:
        type: integer
      server_id:
        type: string
      server_name:
        type: string
    type: object
  utils.HTTPError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  utils.HTTPStatus:
    properties:
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /commands:
    get:
      consumes:
      - application/json
      description: Get an array of command struct
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Command'
            type: array
        "404":
          description: Failed to get commands
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all commands from database
      tags:
      - commands
  /commands/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Command ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Command'
        "500":
          description: Failed to update command
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: update is_active field on a command from database
      tags:
      - commands
    put:
      consumes:
      - application/json
      parameters:
      - description: Command ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Command'
        "500":
          description: Failed to update command
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: update command from database
      tags:
      - commands
  /fixtures:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
        "500":
          description: Not Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
      summary: Create servers, commands in db
      tags:
      - fixtures
  /fixtures/commands:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
        "500":
          description: Not Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
      summary: Create commands in db
      tags:
      - fixtures
  /fixtures/medias:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
        "500":
          description: Not Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
      summary: Create medias in db
      tags:
      - fixtures
  /fixtures/servers:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
        "500":
          description: Not Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
      summary: Create servers in db
      tags:
      - fixtures
  /medias:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
        "500":
          description: Failed to create new media
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: create media from database
      tags:
      - medias
  /medias/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Media'
        "500":
          description: Failed to update media
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: update is_archived field on a media from database
      tags:
      - medias
    put:
      consumes:
      - application/json
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Media'
        "500":
          description: Failed to update media
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: update media from database
      tags:
      - medias
  /servers:
    get:
      consumes:
      - application/json
      description: Get an array of server struct
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Server'
            type: array
        "404":
          description: Failed to get servers
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all servers from database
      tags:
      - servers
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HTTPStatus'
        "500":
          description: Failed to create new server
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Insert a server with default commands in database
      tags:
      - servers
  /servers/{id}:
    get:
      consumes:
      - application/json
      description: Get server struct with command and media struct
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Server'
        "404":
          description: Failed to get server
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get server from database
      tags:
      - servers
  /servers/{id}/commands:
    get:
      consumes:
      - application/json
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Command'
            type: array
        "404":
          description: Failed to get commands
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all commands of a server from database
      tags:
      - servers
  /servers/{id}/medias:
    get:
      consumes:
      - application/json
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Media'
            type: array
        "404":
          description: Failed to get medias
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all medias of a server from database
      tags:
      - servers
swagger: "2.0"
